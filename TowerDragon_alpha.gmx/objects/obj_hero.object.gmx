<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_hero_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Settings
grav = 1;

maxMoveSpeed = 4;
minMoveSpeed = 1;

moveSpeed = minMoveSpeed;

jSpeed = 12;

//Input 
swipeMinLength = 50;

swipeMaxLength = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
hSpeed = 0;
vSpeed = 0;
attacking = false;

//Input
inputDirectional = 1;
jumpInput = false;
attackInput = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up important stuffs

//These variables indicate the position where the user started touching the screen
initX = 0;
initY = 0;

//This indicated whether or not the user is touching the screen
isTouching = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe handling (AF)
var swipeLength = 0;

if (mouse_check_button_pressed(mb_left))
{
    initX = mouse_x;
    initY = mouse_y;
    isTouching = 1;
}

if (isTouching)
{
    swipeLength = point_distance(initX, initY, mouse_x, mouse_y);
    direction = point_direction(initX, initY, mouse_x, mouse_y);
    
    finalX = initX + lengthdir_x(min(swipeMaxLength, swipeLength), direction);
    finalY = initY + lengthdir_y(min(swipeMaxLength, swipeLength), direction);
    
    var lerpFactor = swipeLength / swipeMaxLength;
    
    moveSpeed = lerp(moveSpeed, maxMoveSpeed, lerpFactor);
    
    moveSpeed = clamp(moveSpeed, minMoveSpeed, maxMoveSpeed);
    
      
    show_debug_message(moveSpeed);
}

//Once the user stops touching the screen...
if (mouse_check_button_released(mb_left))
{
    isTouching = 0;
   
    
    if (swipeLength &lt; swipeMinLength)
    {
    //    scr_process_swipe_input(); 
    attackInput = true;   
    }
   

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform controller
move = inputDirectional != 0;

hSpeed = moveSpeed * inputDirectional;

show_debug_message("moveSpeed: ");
show_debug_message(moveSpeed);

show_debug_message("speed: ");
show_debug_message(hSpeed);

if(move)
{
    image_xscale = -inputDirectional;
}

if (!move)
{
    hSpeed = 0;
}

if (place_meeting(x, y + 1, obj_solid))
{
    vSpeed = 0;
    
    if (jumpInput)
    {
        vSpeed = -jSpeed;
    }
}
else
{
    jumpInput = false;
    if (vSpeed &lt; 10)
    {
        vSpeed += grav;
    }
}

if (place_meeting(x + hSpeed, y, obj_solid))
{
    while(!place_meeting(x + sign(hSpeed), y, obj_solid))
    {
        x += sign(hSpeed);
    }
    hSpeed = 0;
}

x += hSpeed;

if (place_meeting(x, y + vSpeed, obj_solid))
{
    while(!place_meeting(x , y+ sign(vSpeed), obj_solid))
    {
        y += sign(vSpeed);
    }
    vSpeed = 0;
}

y += vSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack controller
if (attackInput &amp;&amp; !attacking)
{
    attacking = true;
    attackInput = false;
    with( instance_create(x, y, obj_hero_attacking))
    {
        image_xscale = other.image_xscale;
    }
}

if (sprite_index == spr_hero_attack &amp;&amp;
 (image_index &gt;= image_number - 1) &amp;&amp; attacking)
{
   attacking = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation controller
if (!attacking)
{
    if (move &amp;&amp; sprite_index != spr_hero_walk)
    {
        sprite_index = spr_hero_walk 
        {image_speed = 0.2;};            
    }
    
    if (!move &amp;&amp; sprite_index != spr_hero_idle)
    {
        sprite_index = spr_hero_idle;
    }
}

if (attacking &amp;&amp; sprite_index != spr_hero_attack)
{
    image_index = 0;
    sprite_index = spr_hero_attack 
    {image_speed = 0.1};
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change direction

if (place_meeting(x + hSpeed, y, obj_Hero_Turn_point))
{
    inputDirectional *= -1;
    show_debug_message("colidiu");
    show_debug_message(inputDirectional);
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe handling

//This will set the init variables to be the first position on the screen that is touched.
//In addition, set the isTouching variable to one, indicating that the screen is being touched.
if (mouse_check_button_pressed(mb_left))
{
    initX = mouse_x;
    initY = mouse_y;
    isTouching = 1;
}

//Once the user stops touching the screen...
if (mouse_check_button_released(mb_left))
{
    isTouching = 0;

    var swipeLength = point_distance(initX, initY, mouse_x, mouse_y);
    
    if (swipeLength &gt;= swipeMinLength)
    {
        direction = point_direction(initX, initY, mouse_x, mouse_y);
        scr_process_swipe_input(); 
    }else
    {
        attackInput = true;   
    }
    
    show_debug_message(swipeLength);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw swipe

draw_self();

if (isTouching)
    draw_line(initX, initY, finalX, finalY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
